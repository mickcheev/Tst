import os
import subprocess
import json
import click

from colorama import init, Fore

init()

DEFAULT_PATH = '/home/mikacha/MyProgramms/tst/'
DEFAULT_SOURCE_NAME = 'main'

def get_sample_list() -> list[str]:
    result = []
    with open('sample.txt') as file:
        text = file.read()
        now = ''
        prev = ''
        for i in text:
            if i == '\n' and prev == '\n':
                result.append(now)
                now = ''
            else:
                now += i
            prev = i
    return result

def execute_cpp():
    messages = list[str]
    tests = get_sample_list()

    for i in range(0, len(tests), 2):
        process = subprocess.run(f'./{DEFAULT_SOURCE_NAME}', capture_output=True)
        print(process.stdout)
        print(tests[i])

def compile_cpp(filename: str) -> bool:
    prevfn = 'prevfilename'

    with open(prevfn) as file:
        file1_data = file.read()

    with open(filename) as file:
        file2_data = file.read()
    
    if file2_data != file1_data:
        with open(prevfn, 'w') as file:
            file.write(file2_data)
    
    if os.path.exists('main'):
        os.system('rm main')

    subprocess.run(f'g++ {filename} -o {DEFAULT_SOURCE_NAME}', capture_output=True)

    if not os.path.exists('main'):
        print(Fore.RED + 'Is seems you have a compilation error')
        return False
    return True
    

def get_default_filename() -> str:
    with open(DEFAULT_PATH + 'config.json', 'r') as file:
        return json.load(file)['default_file_path']


@click.command('run')
@click.option('--filename', default=get_default_filename(), help='Set the default execute file')
def run_source(filename: str):
    try:
        os.path.exists(filename)
    except FileNotFoundError:
        click.echo(Fore.RED + 'You set file that does not exists it this directory')
        return None

    file_extension = filename.split('.')[-1]
    
    match file_extension:
        case 'cpp':
            if compile_cpp(filename):
                pass


@click.command('set-default')
@click.argument('filename')
def set_default_filename(filename: str):
    data = {}
    with open(DEFAULT_PATH + 'config.json','r') as file:
        data = json.load(file)

    data['default_file_path'] = filename

    with open(DEFAULT_PATH + 'config.json','w') as file:
        data = json.dump(data, file)

@click.group(help="This programm allow you to automitize compilation and testing of your programms")
def main():
    pass

compile_cpp('main.cpp')
print(execute_cpp())
